@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "ir.ac.kntu.gameobjects.Collision",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_3106 { 
   	label=ac
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1226391184 { 
   	label=kntu
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Bullet1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Bullet</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   alive: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   angle: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bulletImage: Image [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bulletSize: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bulletSpeed: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shooting: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   speedX: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   speedY: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   startingX: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   startingY: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   xPos: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yPos: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(gc: GraphicsContext)</TD></TR>
<TR><TD ALIGN="LEFT" >+ initializeTheDirection(direction: Direction)</TD></TR>
<TR><TD ALIGN="LEFT" >+ kill()</TD></TR>
<TR><TD ALIGN="LEFT" >+ revive(status: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(deltaTime: double)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Collision1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Collision</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   explosion: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   flag: Flag [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   root: Pane [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   specialPowers: SpecialPowers [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tanks: ArrayList&lt;Tank&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   walls: ArrayList&lt;Wall&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkCollision(tank: Tank, dx: double, dy: double): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkForFlag(bullet: Bounds)</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkToAddSpecialPower(randomTank: RandomTank): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ destroy(bullet: ImageView, root: Pane): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ destroyWalls(object: ImageView, dx: double, dy: double, root: Pane): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ makeCopy(tank: Tank): ImageView</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Explosion1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Explosion</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   explosion: ImageView [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ explosionAnimation(xPos: double, yPos: double, root: Pane)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Flag1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Flag</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game1711954517[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   bullet: Bullet [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   canvas: Canvas [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   clicked: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   explosion: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   flag: Flag [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gc: GraphicsContext [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   indexes: int[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isWinning: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   menu: Menu [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   numberOfTotalTanks: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   root: Pane [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scene: Scene [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stage: Stage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tanks: ArrayList&lt;Tank&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   walls: ArrayList&lt;Wall&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkCollisionForBullet(newBullet: Bullet, collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ creatingEnemy()</TD></TR>
<TR><TD ALIGN="LEFT" >+ destroy(bullet: ImageView, collision: Collision): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ handleKeyPress(event: KeyEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ handlingTanks(collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ powerUp(tank: Tank, collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shooting(gc: GraphicsContext, collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showResult()</TD></TR>
<TR><TD ALIGN="LEFT" >+ start(primaryStage: Stage)</TD></TR>
<TR><TD ALIGN="LEFT" >+ startGame(primaryStage: Stage)</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Menu1711954517[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Menu</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   currentItem: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   game: Game [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hbox: HBox [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   menuBox: VBox [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   menuItems: ImageView[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   root: Pane [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scene: Scene [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stage: Stage [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ colorizeButtons(usernameTextField: TextField, passwordField: TextField, usernameLabel: Label, passwordLabel: Label)</TD></TR>
<TR><TD ALIGN="LEFT" >+ createSignInScene()</TD></TR>
<TR><TD ALIGN="LEFT" >+ findingUser(userName: String, passWord: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ handleKeyPress(event: KeyEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ handlingUsers(users: ArrayList&lt;String&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showInvalidCredentialsMessage()</TD></TR>
<TR><TD ALIGN="LEFT" >+ signInHandling(signInButton: Button, usernameTextField: TextField, passwordField: TextField, users: ArrayList&lt;String&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ startGameMenu(currentLine: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ validateCredentials(username: String, password: String, users: ArrayList&lt;String&gt;): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Place1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Place</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addBrickToTheBot(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addBrickToTheTop(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addFlag(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addMetalToTheBot(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addMetalToTheTop(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addProtectionToFlag(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addWallToTheMid(root: Pane, size: int, walls: ArrayList&lt;Wall&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ createCopy(imageView: ImageView): ImageView</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   game: Game [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gc: GraphicsContext [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tanks: ArrayList&lt;Tank&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addDestroyedTanks(tank: Tank)</TD></TR>
<TR><TD ALIGN="LEFT" >+ die()</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(gc: GraphicsContext)</TD></TR>
<TR><TD ALIGN="LEFT" >+ lostHP()</TD></TR>
<TR><TD ALIGN="LEFT" >+ makeCopy(): ImageView</TD></TR>
<TR><TD ALIGN="LEFT" >+ move(scene: Scene, gc: GraphicsContext, collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ moveDown(collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ moveLeft(collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ moveRight(collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ moveUp(collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ordinaryRandom(): ArrayList&lt;RandomTank&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ ordinaryTanks(): ArrayList&lt;OrdinaryTank&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ shieldRandom(): ArrayList&lt;RandomTank&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ shieldTanks(): ArrayList&lt;ShieldTank&gt;</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ShowScores1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ShowScores</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   currentImageIndex: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hBox: HBox[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   imageVBox: VBox [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isWinning: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scene: Scene [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   score: ImageView[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stage: Stage [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   text: Text[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addRandomanks()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addToScene(line: Line)</TD></TR>
<TR><TD ALIGN="LEFT" >+ afterLine()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showScreen()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SpecialPowers1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SpecialPowers</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   imageView: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   xPos: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yPos: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addBuff(player: Player)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Tank1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Tank</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   bullet: Bullet [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   copyOfFirstPos: int[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   direction: Direction [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   health: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   imageView: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   powerOfTheBullet: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   score: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   speedX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   speedY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   xPos: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yPos: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addScore(amount: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ chooseHorizontalPicture(speedX: int, size: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ chooseVerticalPicture(speedY: int, size: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ lostHP()</TD></TR>
<TR><TD ALIGN="LEFT" >+ lostHP(power: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ makeEmpty()</TD></TR>
<TR><TD ALIGN="LEFT" >+ movement(size: int, collision: Collision)</TD></TR>
<TR><TD ALIGN="LEFT" >+ respawnBullet(newBullet: ImageView)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shootBullet(root: Pane, walls: ArrayList&lt;Wall&gt;, tanks: ArrayList&lt;Tank&gt;, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shootBullet(newBullet: ImageView)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateBullet(newBullet: ImageView, root: Pane, collision: Collision)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TankCreation1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TankCreation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   indexes: int[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   numberOfTotalTanks: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ordinaryTanks: ArrayList&lt;OrdinaryTank&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   randomTanks: ArrayList&lt;RandomTank&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shieldTanks: ArrayList&lt;ShieldTank&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tanks: ArrayList&lt;Tank&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   walls: ArrayList&lt;Wall&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ creatingEnemy(root: Pane, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ handlingOrdinary(root: Pane, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ handlingRandom(root: Pane, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ handlingShield(root: Pane, flag: Flag)</TD></TR>
<TR><TD ALIGN="LEFT" >+ handlingTanks(root: Pane, flag: Flag)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

User1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)User</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   currentLine: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   highScore: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   numberOfMatches: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   passWord: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   score: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   userName: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addScore(score: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addTotalNumberOfMatches()</TD></TR>
<TR><TD ALIGN="LEFT" >+ textFileModifier()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Wall1426278113[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Wall</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ drawWall(root: Pane)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Collision1426278113 -> Explosion1426278113[label="destroy() -> explosionAnimation()"];
Collision1426278113 -> Flag1426278113[label="flag
[0..1]"];
Collision1426278113 -> Player1426278113[label="checkForFlag() -> die()"];
Collision1426278113 -> SpecialPowers1426278113[label="specialPowers
[0..1]"];
Collision1426278113 -> Tank1426278113[label="tanks
[0..*]"];
Collision1426278113 -> Wall1426278113[label="walls
[0..*]"];
Game1711954517 -> Bullet1426278113[label="bullet
[0..1]"];
Game1711954517 -> Collision1426278113[label="checkCollisionForBullet() -> destroyWalls()"];
Game1711954517 -> Explosion1426278113[label="destroy() -> explosionAnimation()"];
Game1711954517 -> Flag1426278113[label="flag
[0..1]"];
Game1711954517 -> Menu1711954517[label="menu
[0..1]"];
Game1711954517 -> Place1426278113[label="startGame() -> addBrickToTheTop()"];
Game1711954517 -> Player1426278113[label="player
[0..1]"];
Game1711954517 -> ShowScores1426278113[label="showResult() -> showScreen()"];
Game1711954517 -> Tank1426278113[label="tanks
[0..*]"];
Game1711954517 -> TankCreation1426278113[label="creatingEnemy() -> creatingEnemy()"];
Game1711954517 -> User1426278113[label="user
[0..1]"];
Game1711954517 -> Wall1426278113[label="walls
[0..*]"];
Player1426278113 -> Game1711954517[label="game
[0..1]"];
Player1426278113 -> Tank1426278113[label="tanks
[0..*]"];
Tank1426278113 -> Player1426278113[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml